var aglio = require('aglio');
var fs = require('fs');
var path = require("path");

module.exports = {

        book: {
            assets: "./book",
            js: [
                "plugin.js"
            ]

    },
    hooks: {
        init  : function ()
        {

            var options = 'bare'; // should be a config var

            // initialize a cache
            this.renderedApi = {};

            var $this = this;

            // extract this plugin.
            var plugin = this.plugins.list.filter(function(el){

                if(el.name == 'gitbook-plugin-apiary'){
                    return true;
                }
                return false;
            });
            var plugin = plugin.pop();

            // get the template.
            options = plugin.baseDir + '/templates/bare.jade';

            // get the files that are a part of the book.
            var files = this.options.pluginsConfig.apiary.files;

            for(index in files){

                var file = path.join($this.options.input, files[index]);

                // important: readFile is synchronous so it pauses thread execution until this is finished.
                  fs.readFile(file,  "utf-8", function(err, data){

                    if(err) return console.log(err);

                    aglio.render(data, options, function(err, html, warnings){

                        if(err) return console.log(err);
                        //if(warnings)  console.log(warnings);

                        // set the cache for just before the page is rendered.
                        $this.renderedApi[file] = html;
                    });
                });
            }

        },
        "page:before": function (page) {

            var fullpath = path.join(this.options.input, page.path);

            // if it is set, we are going to switch out the conted
            if(this.renderedApi[fullpath] != undefined)
            {
                page.content = this.renderedApi[fullpath];
            }

            return page;
        }
    }
};